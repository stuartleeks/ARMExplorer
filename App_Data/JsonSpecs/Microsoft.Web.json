[
    /* Microsoft.Web/locations - this is manually added here as it isn't currently in the swagger (https://github.com/Azure/azure-rest-api-specs/blob/master/arm-web/2015-08-01/swagger/service.json) */
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{name}",
        "ApiVersion": "2015-08-01-preview"
    },
    /* The next set of hard-coded locations is not ideal. Unfortunately the Microsoft.Web/locations doesn't seem to return a list */
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/East Asia/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/North Europe/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/West Europe/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/Southeast Asia/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/West US/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/East US/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/Japan West/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/Japan East/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/South Central US/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/East US 2/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/North Central US/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/Central US/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/Brazil South/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/Australia East/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/Australia Southeast/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/Central India/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/West India/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/South India/managedApis",
        "ApiVersion": "2015-08-01-preview"
    },
    /* Microsoft.Web/connections - this is manually added here as it isn't currently in the swagger (https://github.com/Azure/azure-rest-api-specs/blob/master/arm-web/2015-08-01/swagger/service.json) */
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{name}",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{name}",
        "ApiVersion": "2015-08-01-preview"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "keyVaultId": "(string)",
                "keyVaultSecretName": "(string)",
                "provisioningState": "(string)",
                "thumbprint": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "keyVaultId": "Key Vault Csm resource Id",
                "keyVaultSecretName": "Key Vault secret name",
                "provisioningState": "Status of the Key Vault secret",
                "thumbprint": "Thumbprint of the certificate stored in KeyVault"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "keyVaultId": "(string)",
                "keyVaultSecretName": "(string)",
                "provisioningState": "(string)",
                "thumbprint": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "keyVaultId": "Key Vault Csm resource Id",
                "keyVaultSecretName": "Key Vault secret name",
                "provisioningState": "Status of the Key Vault secret",
                "thumbprint": "Thumbprint of the certificate stored in KeyVault"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "(string)",
                "domainVerificationToken": "(string)",
                "validityInYears": "(integer)",
                "keySize": "(integer)",
                "productType": "(string)",
                "autoRenew": "(boolean)",
                "provisioningState": "(string)",
                "status": "(string)",
                "signedCertificate": "(string)",
                "csr": "(string)",
                "intermediate": "(string)",
                "root": "(string)",
                "serialNumber": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "Certificate distinguished name",
                "domainVerificationToken": "Domain Verification Token",
                "validityInYears": "Duration in years (must be between 1 and 3)",
                "keySize": "Certificate Key Size",
                "productType": "Certificate product type",
                "autoRenew": "Auto renew",
                "provisioningState": "Status of certificate order",
                "status": "Current order status",
                "signedCertificate": "Signed certificate",
                "csr": "Last CSR that was created for this order",
                "intermediate": "Intermediate certificate",
                "root": "Root certificate",
                "serialNumber": "Current serial number of the certificate"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "(string)",
                "domainVerificationToken": "(string)",
                "validityInYears": "(integer)",
                "keySize": "(integer)",
                "productType": "(string)",
                "autoRenew": "(boolean)",
                "provisioningState": "(string)",
                "status": "(string)",
                "signedCertificate": "(string)",
                "csr": "(string)",
                "intermediate": "(string)",
                "root": "(string)",
                "serialNumber": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "Certificate distinguished name",
                "domainVerificationToken": "Domain Verification Token",
                "validityInYears": "Duration in years (must be between 1 and 3)",
                "keySize": "Certificate Key Size",
                "productType": "Certificate product type",
                "autoRenew": "Auto renew",
                "provisioningState": "Status of certificate order",
                "status": "Current order status",
                "signedCertificate": "Signed certificate",
                "csr": "Last CSR that was created for this order",
                "intermediate": "Intermediate certificate",
                "root": "Root certificate",
                "serialNumber": "Current serial number of the certificate"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/reissue",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "keySize": "(integer)",
                "delayExistingRevokeInHours": "(integer)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "keySize": "Certificate Key Size",
                "delayExistingRevokeInHours": "Delay in hours to revoke existing certificate after the new certificate is issued"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/renew",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "keySize": "(integer)",
                "delayExistingRevokeInHours": "(integer)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "keySize": "Certificate Key Size",
                "delayExistingRevokeInHours": "Delay in hours to revoke existing certificate after the new certificate is issued"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "friendlyName": "(string)",
                "subjectName": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "pfxBlob": "(string)",
                "siteName": "(string)",
                "selfLink": "(string)",
                "issuer": "(string)",
                "issueDate": "(string)",
                "expirationDate": "(string)",
                "password": "(string)",
                "thumbprint": "(string)",
                "valid": "(boolean)",
                "cerBlob": "(string)",
                "publicKeyHash": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "keyVaultId": "(string)",
                "keyVaultSecretName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "friendlyName": "Friendly name of the certificate",
                "subjectName": "Subject name of the certificate",
                "hostNames": [
                    null
                ],
                "pfxBlob": "Pfx blob",
                "siteName": "App name",
                "selfLink": "Self link",
                "issuer": "Certificate issuer",
                "issueDate": "Certificate issue Date",
                "expirationDate": "Certificate expriration date",
                "password": "Certificate password",
                "thumbprint": "Certificate thumbprint",
                "valid": "Is the certificate valid?",
                "cerBlob": "Raw bytes of .cer file",
                "publicKeyHash": "Public key hash",
                "hostingEnvironmentProfile": {
                    "id": "Resource id of the hostingEnvironment (App Service Environment)",
                    "name": "Name of the hostingEnvironment (App Service Environment) (read only)",
                    "type": "Resource type of the hostingEnvironment (App Service Environment) (read only)"
                },
                "keyVaultId": "Key Vault Csm resource Id",
                "keyVaultSecretName": "Key Vault secret name"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "friendlyName": "(string)",
                "subjectName": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "pfxBlob": "(string)",
                "siteName": "(string)",
                "selfLink": "(string)",
                "issuer": "(string)",
                "issueDate": "(string)",
                "expirationDate": "(string)",
                "password": "(string)",
                "thumbprint": "(string)",
                "valid": "(boolean)",
                "cerBlob": "(string)",
                "publicKeyHash": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "keyVaultId": "(string)",
                "keyVaultSecretName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "friendlyName": "Friendly name of the certificate",
                "subjectName": "Subject name of the certificate",
                "hostNames": [
                    null
                ],
                "pfxBlob": "Pfx blob",
                "siteName": "App name",
                "selfLink": "Self link",
                "issuer": "Certificate issuer",
                "issueDate": "Certificate issue Date",
                "expirationDate": "Certificate expriration date",
                "password": "Certificate password",
                "thumbprint": "Certificate thumbprint",
                "valid": "Is the certificate valid?",
                "cerBlob": "Raw bytes of .cer file",
                "publicKeyHash": "Public key hash",
                "hostingEnvironmentProfile": {
                    "id": "Resource id of the hostingEnvironment (App Service Environment)",
                    "name": "Name of the hostingEnvironment (App Service Environment) (read only)",
                    "type": "Resource type of the hostingEnvironment (App Service Environment) (read only)"
                },
                "keyVaultId": "Key Vault Csm resource Id",
                "keyVaultSecretName": "Key Vault secret name"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "contactAdmin": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactBilling": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactRegistrant": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactTech": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "registrationStatus": "(string)",
                "provisioningState": "(string)",
                "nameServers": [
                    "(string)"
                ],
                "privacy": "(boolean)",
                "createdTime": "(string)",
                "expirationTime": "(string)",
                "lastRenewedTime": "(string)",
                "autoRenew": "(boolean)",
                "readyForDnsRecordManagement": "(boolean)",
                "managedHostNames": [
                    {
                        "name": "(string)",
                        "siteNames": [
                            "(string)"
                        ],
                        "azureResourceName": "(string)",
                        "azureResourceType": "(string)",
                        "customHostNameDnsRecordType": "(string)",
                        "hostNameType": "(string)"
                    }
                ],
                "consent": {
                    "agreementKeys": [
                        "(string)"
                    ],
                    "agreedBy": "(string)",
                    "agreedAt": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "contactAdmin": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "contactBilling": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "contactRegistrant": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "contactTech": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "registrationStatus": "Domain registration status",
                "provisioningState": "Domain provisioning state",
                "nameServers": [
                    null
                ],
                "privacy": "If true then domain privacy is enabled for this domain",
                "createdTime": "Domain creation timestamp",
                "expirationTime": "Domain expiration timestamp",
                "lastRenewedTime": "Timestamp when the domain was renewed last time",
                "autoRenew": "If true then domain will renewed automatically",
                "readyForDnsRecordManagement": "If true then Azure can assign this domain to Web Apps. This value will be true if domain registration status is active and it is hosted on name servers Azure has programmatic access to",
                "managedHostNames": [
                    {
                        "name": "Name of the hostname",
                        "siteNames": [
                            null
                        ],
                        "azureResourceName": "Name of the Azure resource the hostname is assigned to. If it is assigned to a traffic manager then it will be the traffic manager name otherwise it will be the website name",
                        "azureResourceType": "Type of the Azure resource the hostname is assigned to",
                        "customHostNameDnsRecordType": "Type of the Dns record",
                        "hostNameType": "Type of the hostname"
                    }
                ],
                "consent": {
                    "agreementKeys": [
                        null
                    ],
                    "agreedBy": "Client IP address",
                    "agreedAt": "Timestamp when the agreements were accepted"
                }
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "contactAdmin": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactBilling": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactRegistrant": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactTech": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "registrationStatus": "(string)",
                "provisioningState": "(string)",
                "nameServers": [
                    "(string)"
                ],
                "privacy": "(boolean)",
                "createdTime": "(string)",
                "expirationTime": "(string)",
                "lastRenewedTime": "(string)",
                "autoRenew": "(boolean)",
                "readyForDnsRecordManagement": "(boolean)",
                "managedHostNames": [
                    {
                        "name": "(string)",
                        "siteNames": [
                            "(string)"
                        ],
                        "azureResourceName": "(string)",
                        "azureResourceType": "(string)",
                        "customHostNameDnsRecordType": "(string)",
                        "hostNameType": "(string)"
                    }
                ],
                "consent": {
                    "agreementKeys": [
                        "(string)"
                    ],
                    "agreedBy": "(string)",
                    "agreedAt": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "contactAdmin": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "contactBilling": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "contactRegistrant": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "contactTech": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "registrationStatus": "Domain registration status",
                "provisioningState": "Domain provisioning state",
                "nameServers": [
                    null
                ],
                "privacy": "If true then domain privacy is enabled for this domain",
                "createdTime": "Domain creation timestamp",
                "expirationTime": "Domain expiration timestamp",
                "lastRenewedTime": "Timestamp when the domain was renewed last time",
                "autoRenew": "If true then domain will renewed automatically",
                "readyForDnsRecordManagement": "If true then Azure can assign this domain to Web Apps. This value will be true if domain registration status is active and it is hosted on name servers Azure has programmatic access to",
                "managedHostNames": [
                    {
                        "name": "Name of the hostname",
                        "siteNames": [
                            null
                        ],
                        "azureResourceName": "Name of the Azure resource the hostname is assigned to. If it is assigned to a traffic manager then it will be the traffic manager name otherwise it will be the website name",
                        "azureResourceType": "Type of the Azure resource the hostname is assigned to",
                        "customHostNameDnsRecordType": "Type of the Dns record",
                        "hostNameType": "Type of the hostname"
                    }
                ],
                "consent": {
                    "agreementKeys": [
                        null
                    ],
                    "agreedBy": "Client IP address",
                    "agreedAt": "Timestamp when the agreements were accepted"
                }
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/operationresults/{operationId}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates",
        "ResponseBody": [
            {
                "id": "(string)",
                "name": "(string)",
                "type": "(string)",
                "location": "(string)",
                "tags": {},
                "plan": {
                    "name": "(string)",
                    "publisher": "(string)",
                    "product": "(string)",
                    "promotionCode": "(string)",
                    "version": "(string)"
                },
                "properties": {
                    "id": "(string)",
                    "name": "(string)",
                    "location": "(string)",
                    "type": "(string)",
                    "tags": {},
                    "properties": {
                        "friendlyName": "(string)",
                        "subjectName": "(string)",
                        "hostNames": [
                            "(string)"
                        ],
                        "pfxBlob": "(string)",
                        "siteName": "(string)",
                        "selfLink": "(string)",
                        "issuer": "(string)",
                        "issueDate": "(string)",
                        "expirationDate": "(string)",
                        "password": "(string)",
                        "thumbprint": "(string)",
                        "valid": "(boolean)",
                        "cerBlob": "(string)",
                        "publicKeyHash": "(string)",
                        "hostingEnvironmentProfile": {
                            "id": "(string)",
                            "name": "(string)",
                            "type": "(string)"
                        },
                        "keyVaultId": "(string)",
                        "keyVaultSecretName": "(string)"
                    }
                },
                "sku": {
                    "name": "(string)",
                    "tier": "(string)",
                    "size": "(string)",
                    "family": "(string)",
                    "capacity": "(integer)"
                }
            }
        ],
        "ResponseBodyDoc": [
            {
                "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
                "name": "Name of resource",
                "type": "Type of resource e.g Microsoft.Web/sites",
                "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
                "tags": {},
                "plan": {
                    "name": "The name",
                    "publisher": "The publisher",
                    "product": "The product",
                    "promotionCode": "The promotion code",
                    "version": "Version of product"
                },
                "properties": {
                    "id": "Resource Id",
                    "name": "Resource Name",
                    "location": "Resource Location",
                    "type": "Resource type",
                    "tags": {},
                    "properties": {
                        "friendlyName": "Friendly name of the certificate",
                        "subjectName": "Subject name of the certificate",
                        "hostNames": [
                            null
                        ],
                        "pfxBlob": "Pfx blob",
                        "siteName": "App name",
                        "selfLink": "Self link",
                        "issuer": "Certificate issuer",
                        "issueDate": "Certificate issue Date",
                        "expirationDate": "Certificate expriration date",
                        "password": "Certificate password",
                        "thumbprint": "Certificate thumbprint",
                        "valid": "Is the certificate valid?",
                        "cerBlob": "Raw bytes of .cer file",
                        "publicKeyHash": "Public key hash",
                        "hostingEnvironmentProfile": {
                            "id": "Resource id of the hostingEnvironment (App Service Environment)",
                            "name": "Name of the hostingEnvironment (App Service Environment) (read only)",
                            "type": "Resource type of the hostingEnvironment (App Service Environment) (read only)"
                        },
                        "keyVaultId": "Key Vault Csm resource Id",
                        "keyVaultSecretName": "Key Vault secret name"
                    }
                },
                "sku": {
                    "name": "Name of the resource sku",
                    "tier": "Service Tier of the resource sku",
                    "size": "Size specifier of the resource sku",
                    "family": "Family code of the resource sku",
                    "capacity": "Current number of instances assigned to the resource"
                }
            }
        ],
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/managedHostingEnvironments",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/classicMobileServices",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability",
        "RequestBody": {
            "name": "(string)",
            "type": "(string)",
            "isFqdn": "(boolean)"
        },
        "RequestBodyDoc": {
            "name": "Resource name to verify",
            "type": "Resource type used for verification",
            "isFqdn": "Is fully qualified domain name"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "(string)",
                "domainVerificationToken": "(string)",
                "validityInYears": "(integer)",
                "keySize": "(integer)",
                "productType": "(string)",
                "autoRenew": "(boolean)",
                "provisioningState": "(string)",
                "status": "(string)",
                "signedCertificate": "(string)",
                "csr": "(string)",
                "intermediate": "(string)",
                "root": "(string)",
                "serialNumber": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "Certificate distinguished name",
                "domainVerificationToken": "Domain Verification Token",
                "validityInYears": "Duration in years (must be between 1 and 3)",
                "keySize": "Certificate Key Size",
                "productType": "Certificate product type",
                "autoRenew": "Auto renew",
                "provisioningState": "Status of certificate order",
                "status": "Current order status",
                "signedCertificate": "Signed certificate",
                "csr": "Last CSR that was created for this order",
                "intermediate": "Intermediate certificate",
                "root": "Root certificate",
                "serialNumber": "Current serial number of the certificate"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "contactAdmin": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactBilling": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactRegistrant": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactTech": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "registrationStatus": "(string)",
                "provisioningState": "(string)",
                "nameServers": [
                    "(string)"
                ],
                "privacy": "(boolean)",
                "createdTime": "(string)",
                "expirationTime": "(string)",
                "lastRenewedTime": "(string)",
                "autoRenew": "(boolean)",
                "readyForDnsRecordManagement": "(boolean)",
                "managedHostNames": [
                    {
                        "name": "(string)",
                        "siteNames": [
                            "(string)"
                        ],
                        "azureResourceName": "(string)",
                        "azureResourceType": "(string)",
                        "customHostNameDnsRecordType": "(string)",
                        "hostNameType": "(string)"
                    }
                ],
                "consent": {
                    "agreementKeys": [
                        "(string)"
                    ],
                    "agreedBy": "(string)",
                    "agreedAt": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Name of the domain",
                "contactAdmin": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "contactBilling": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "contactRegistrant": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "contactTech": {
                    "addressMailing": {
                        "address1": "Address 1",
                        "address2": "Address 2",
                        "city": "City",
                        "country": "Country",
                        "postalCode": "Postal code",
                        "state": "State"
                    },
                    "email": "Email address",
                    "fax": "Fax number",
                    "jobTitle": "Job title",
                    "nameFirst": "First name",
                    "nameLast": "Last name",
                    "nameMiddle": "Middle name",
                    "organization": "Organization",
                    "phone": "Phone number"
                },
                "registrationStatus": "Domain registration status",
                "provisioningState": "Domain provisioning state",
                "nameServers": [
                    null
                ],
                "privacy": "If true then domain privacy is enabled for this domain",
                "createdTime": "Domain creation timestamp",
                "expirationTime": "Domain expiration timestamp",
                "lastRenewedTime": "Timestamp when the domain was renewed last time",
                "autoRenew": "If true then domain will renewed automatically",
                "readyForDnsRecordManagement": "If true then Azure can assign this domain to Web Apps. This value will be true if domain registration status is active and it is hosted on name servers Azure has programmatic access to",
                "managedHostNames": [
                    {
                        "name": "Name of the hostname",
                        "siteNames": [
                            null
                        ],
                        "azureResourceName": "Name of the Azure resource the hostname is assigned to. If it is assigned to a traffic manager then it will be the traffic manager name otherwise it will be the website name",
                        "azureResourceType": "Type of the Azure resource the hostname is assigned to",
                        "customHostNameDnsRecordType": "Type of the Dns record",
                        "hostNameType": "Type of the hostname"
                    }
                ],
                "consent": {
                    "agreementKeys": [
                        null
                    ],
                    "agreedBy": "Client IP address",
                    "agreedAt": "Timestamp when the agreements were accepted"
                }
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability",
        "RequestBody": {
            "name": "(string)"
        },
        "RequestBodyDoc": {
            "name": "Name of the object"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations",
        "RequestBody": {
            "keywords": "(string)",
            "maxDomainRecommendations": "(integer)"
        },
        "RequestBodyDoc": {
            "keywords": "Keywords to be used for generating domain recommendations",
            "maxDomainRecommendations": "Maximum number of recommendations"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
        "RequestBody": {
            "targetResourceGroup": "(string)",
            "resources": [
                "(string)"
            ]
        },
        "RequestBodyDoc": {
            "resources": [
                null
            ]
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "location": "(string)",
                "status": "(string)",
                "vnetName": "(string)",
                "vnetResourceGroupName": "(string)",
                "vnetSubnetName": "(string)",
                "virtualNetwork": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)",
                    "subnet": "(string)"
                },
                "internalLoadBalancingMode": "(string)",
                "multiSize": "(string)",
                "multiRoleCount": "(integer)",
                "workerPools": [
                    {
                        "id": "(string)",
                        "name": "(string)",
                        "location": "(string)",
                        "type": "(string)",
                        "tags": {},
                        "properties": {
                            "workerSizeId": "(integer)",
                            "computeMode": "(string)",
                            "workerSize": "(string)",
                            "workerCount": "(integer)",
                            "instanceNames": [
                                "(string)"
                            ]
                        },
                        "sku": {
                            "name": "(string)",
                            "tier": "(string)",
                            "size": "(string)",
                            "family": "(string)",
                            "capacity": "(integer)"
                        }
                    }
                ],
                "ipsslAddressCount": "(integer)",
                "databaseEdition": "(string)",
                "databaseServiceObjective": "(string)",
                "upgradeDomains": "(integer)",
                "subscriptionId": "(string)",
                "dnsSuffix": "(string)",
                "lastAction": "(string)",
                "lastActionResult": "(string)",
                "allowedMultiSizes": "(string)",
                "allowedWorkerSizes": "(string)",
                "maximumNumberOfMachines": "(integer)",
                "vipMappings": [
                    {
                        "virtualIP": "(string)",
                        "internalHttpPort": "(integer)",
                        "internalHttpsPort": "(integer)",
                        "inUse": "(boolean)"
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "(string)",
                        "availableCapacity": "(integer)",
                        "totalCapacity": "(integer)",
                        "unit": "(string)",
                        "computeMode": "(string)",
                        "workerSize": "(string)",
                        "workerSizeId": "(integer)",
                        "excludeFromCapacityAllocation": "(boolean)",
                        "isApplicableForAllComputeModes": "(boolean)",
                        "siteMode": "(string)"
                    }
                ],
                "networkAccessControlList": [
                    {
                        "action": "(string)",
                        "description": "(string)",
                        "order": "(integer)",
                        "remoteSubnet": "(string)"
                    }
                ],
                "environmentIsHealthy": "(boolean)",
                "environmentStatus": "(string)",
                "resourceGroup": "(string)",
                "apiManagementAccountId": "(string)",
                "suspended": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Name of the hostingEnvironment (App Service Environment)",
                "location": "Location of the hostingEnvironment (App Service Environment), e.g. \"West US",
                "status": "Current status of the hostingEnvironment (App Service Environment)",
                "vnetName": "Name of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetResourceGroupName": "Resource group of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetSubnetName": "Subnet of the hostingEnvironment's (App Service Environment) virtual network",
                "virtualNetwork": {
                    "id": "Resource id of the virtual network",
                    "name": "Name of the virtual network (read-only)",
                    "type": "Resource type of the virtual network (read-only)",
                    "subnet": "Subnet within the virtual network"
                },
                "internalLoadBalancingMode": "Specifies which endpoints to serve internally in the hostingEnvironment's (App Service Environment) VNET",
                "multiSize": "Front-end VM size, e.g. \"Medium\", \"Large",
                "multiRoleCount": "Number of front-end instances",
                "workerPools": [
                    {
                        "id": "Resource Id",
                        "name": "Resource Name",
                        "location": "Resource Location",
                        "type": "Resource type",
                        "tags": {},
                        "properties": {
                            "workerSizeId": "Worker size id for referencing this worker pool",
                            "computeMode": "Shared or dedicated web app hosting",
                            "workerSize": "VM size of the worker pool instances",
                            "workerCount": "Number of instances in the worker pool",
                            "instanceNames": [
                                null
                            ]
                        },
                        "sku": {
                            "name": "Name of the resource sku",
                            "tier": "Service Tier of the resource sku",
                            "size": "Size specifier of the resource sku",
                            "family": "Family code of the resource sku",
                            "capacity": "Current number of instances assigned to the resource"
                        }
                    }
                ],
                "ipsslAddressCount": "Number of IP SSL addresses reserved for this hostingEnvironment (App Service Environment)",
                "databaseEdition": "Edition of the metadata database for the hostingEnvironment (App Service Environment) e.g. \"Standard",
                "databaseServiceObjective": "Service objective of the metadata database for the hostingEnvironment (App Service Environment) e.g. \"S0",
                "upgradeDomains": "Number of upgrade domains of this hostingEnvironment (App Service Environment)",
                "subscriptionId": "Subscription of the hostingEnvironment (App Service Environment)",
                "dnsSuffix": "DNS suffix of the hostingEnvironment (App Service Environment)",
                "lastAction": "Last deployment action on this hostingEnvironment (App Service Environment)",
                "lastActionResult": "Result of the last deployment action on this hostingEnvironment (App Service Environment)",
                "allowedMultiSizes": "List of comma separated strings describing which VM sizes are allowed for front-ends",
                "allowedWorkerSizes": "List of comma separated strings describing which VM sizes are allowed for workers",
                "maximumNumberOfMachines": "Maximum number of VMs in this hostingEnvironment (App Service Environment)",
                "vipMappings": [
                    {
                        "virtualIP": "Virtual IP address",
                        "internalHttpPort": "Internal HTTP port",
                        "internalHttpsPort": "Internal HTTPS port",
                        "inUse": "Is VIP mapping in use"
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "Name of the stamp",
                        "availableCapacity": "Available capacity (# of machines, bytes of storage etc...)",
                        "totalCapacity": "Total capacity (# of machines, bytes of storage etc...)",
                        "unit": "Name of the unit",
                        "computeMode": "Shared/Dedicated workers",
                        "workerSize": "Size of the machines",
                        "workerSizeId": "Size Id of machines: \r\n            0 - Small\r\n            1 - Medium\r\n            2 - Large",
                        "excludeFromCapacityAllocation": "If true it includes basic sites\r\n            Basic sites are not used for capacity allocation.",
                        "isApplicableForAllComputeModes": "Is capacity applicable for all sites?",
                        "siteMode": "Shared or Dedicated"
                    }
                ],
                "networkAccessControlList": [
                    {}
                ],
                "environmentIsHealthy": "True/false indicating whether the hostingEnvironment (App Service Environment) is healthy",
                "environmentStatus": "Detailed message about with results of the last check of the hostingEnvironment (App Service Environment)",
                "resourceGroup": "Resource group of the hostingEnvironment (App Service Environment)",
                "apiManagementAccountId": "Api Management Account associated with this Hosting Environment",
                "suspended": "True/false indicating whether the hostingEnvironment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available\r\n            (most likely because NSG blocked the incoming traffic)"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "workerSizeId": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerCount": "(integer)",
                "instanceNames": [
                    "(string)"
                ]
            },
            "sku": {
                "name": "(string)",
                "tier": "(string)",
                "size": "(string)",
                "family": "(string)",
                "capacity": "(integer)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "workerSizeId": "Worker size id for referencing this worker pool",
                "computeMode": "Shared or dedicated web app hosting",
                "workerSize": "VM size of the worker pool instances",
                "workerCount": "Number of instances in the worker pool",
                "instanceNames": [
                    null
                ]
            },
            "sku": {
                "name": "Name of the resource sku",
                "tier": "Service Tier of the resource sku",
                "size": "Size specifier of the resource sku",
                "family": "Family code of the resource sku",
                "capacity": "Current number of instances assigned to the resource"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "workerSizeId": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerCount": "(integer)",
                "instanceNames": [
                    "(string)"
                ]
            },
            "sku": {
                "name": "(string)",
                "tier": "(string)",
                "size": "(string)",
                "family": "(string)",
                "capacity": "(integer)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "workerSizeId": "Worker size id for referencing this worker pool",
                "computeMode": "Shared or dedicated web app hosting",
                "workerSize": "VM size of the worker pool instances",
                "workerCount": "Number of instances in the worker pool",
                "instanceNames": [
                    null
                ]
            },
            "sku": {
                "name": "Name of the resource sku",
                "tier": "Service Tier of the resource sku",
                "size": "Size specifier of the resource sku",
                "family": "Family code of the resource sku",
                "capacity": "Current number of instances assigned to the resource"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "location": "(string)",
                "status": "(string)",
                "vnetName": "(string)",
                "vnetResourceGroupName": "(string)",
                "vnetSubnetName": "(string)",
                "virtualNetwork": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)",
                    "subnet": "(string)"
                },
                "internalLoadBalancingMode": "(string)",
                "multiSize": "(string)",
                "multiRoleCount": "(integer)",
                "workerPools": [
                    {
                        "id": "(string)",
                        "name": "(string)",
                        "location": "(string)",
                        "type": "(string)",
                        "tags": {},
                        "properties": {
                            "workerSizeId": "(integer)",
                            "computeMode": "(string)",
                            "workerSize": "(string)",
                            "workerCount": "(integer)",
                            "instanceNames": [
                                "(string)"
                            ]
                        },
                        "sku": {
                            "name": "(string)",
                            "tier": "(string)",
                            "size": "(string)",
                            "family": "(string)",
                            "capacity": "(integer)"
                        }
                    }
                ],
                "ipsslAddressCount": "(integer)",
                "databaseEdition": "(string)",
                "databaseServiceObjective": "(string)",
                "upgradeDomains": "(integer)",
                "subscriptionId": "(string)",
                "dnsSuffix": "(string)",
                "lastAction": "(string)",
                "lastActionResult": "(string)",
                "allowedMultiSizes": "(string)",
                "allowedWorkerSizes": "(string)",
                "maximumNumberOfMachines": "(integer)",
                "vipMappings": [
                    {
                        "virtualIP": "(string)",
                        "internalHttpPort": "(integer)",
                        "internalHttpsPort": "(integer)",
                        "inUse": "(boolean)"
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "(string)",
                        "availableCapacity": "(integer)",
                        "totalCapacity": "(integer)",
                        "unit": "(string)",
                        "computeMode": "(string)",
                        "workerSize": "(string)",
                        "workerSizeId": "(integer)",
                        "excludeFromCapacityAllocation": "(boolean)",
                        "isApplicableForAllComputeModes": "(boolean)",
                        "siteMode": "(string)"
                    }
                ],
                "networkAccessControlList": [
                    {
                        "action": "(string)",
                        "description": "(string)",
                        "order": "(integer)",
                        "remoteSubnet": "(string)"
                    }
                ],
                "environmentIsHealthy": "(boolean)",
                "environmentStatus": "(string)",
                "resourceGroup": "(string)",
                "apiManagementAccountId": "(string)",
                "suspended": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Name of the hostingEnvironment (App Service Environment)",
                "location": "Location of the hostingEnvironment (App Service Environment), e.g. \"West US",
                "status": "Current status of the hostingEnvironment (App Service Environment)",
                "vnetName": "Name of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetResourceGroupName": "Resource group of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetSubnetName": "Subnet of the hostingEnvironment's (App Service Environment) virtual network",
                "virtualNetwork": {
                    "id": "Resource id of the virtual network",
                    "name": "Name of the virtual network (read-only)",
                    "type": "Resource type of the virtual network (read-only)",
                    "subnet": "Subnet within the virtual network"
                },
                "internalLoadBalancingMode": "Specifies which endpoints to serve internally in the hostingEnvironment's (App Service Environment) VNET",
                "multiSize": "Front-end VM size, e.g. \"Medium\", \"Large",
                "multiRoleCount": "Number of front-end instances",
                "workerPools": [
                    {
                        "id": "Resource Id",
                        "name": "Resource Name",
                        "location": "Resource Location",
                        "type": "Resource type",
                        "tags": {},
                        "properties": {
                            "workerSizeId": "Worker size id for referencing this worker pool",
                            "computeMode": "Shared or dedicated web app hosting",
                            "workerSize": "VM size of the worker pool instances",
                            "workerCount": "Number of instances in the worker pool",
                            "instanceNames": [
                                null
                            ]
                        },
                        "sku": {
                            "name": "Name of the resource sku",
                            "tier": "Service Tier of the resource sku",
                            "size": "Size specifier of the resource sku",
                            "family": "Family code of the resource sku",
                            "capacity": "Current number of instances assigned to the resource"
                        }
                    }
                ],
                "ipsslAddressCount": "Number of IP SSL addresses reserved for this hostingEnvironment (App Service Environment)",
                "databaseEdition": "Edition of the metadata database for the hostingEnvironment (App Service Environment) e.g. \"Standard",
                "databaseServiceObjective": "Service objective of the metadata database for the hostingEnvironment (App Service Environment) e.g. \"S0",
                "upgradeDomains": "Number of upgrade domains of this hostingEnvironment (App Service Environment)",
                "subscriptionId": "Subscription of the hostingEnvironment (App Service Environment)",
                "dnsSuffix": "DNS suffix of the hostingEnvironment (App Service Environment)",
                "lastAction": "Last deployment action on this hostingEnvironment (App Service Environment)",
                "lastActionResult": "Result of the last deployment action on this hostingEnvironment (App Service Environment)",
                "allowedMultiSizes": "List of comma separated strings describing which VM sizes are allowed for front-ends",
                "allowedWorkerSizes": "List of comma separated strings describing which VM sizes are allowed for workers",
                "maximumNumberOfMachines": "Maximum number of VMs in this hostingEnvironment (App Service Environment)",
                "vipMappings": [
                    {
                        "virtualIP": "Virtual IP address",
                        "internalHttpPort": "Internal HTTP port",
                        "internalHttpsPort": "Internal HTTPS port",
                        "inUse": "Is VIP mapping in use"
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "Name of the stamp",
                        "availableCapacity": "Available capacity (# of machines, bytes of storage etc...)",
                        "totalCapacity": "Total capacity (# of machines, bytes of storage etc...)",
                        "unit": "Name of the unit",
                        "computeMode": "Shared/Dedicated workers",
                        "workerSize": "Size of the machines",
                        "workerSizeId": "Size Id of machines: \r\n            0 - Small\r\n            1 - Medium\r\n            2 - Large",
                        "excludeFromCapacityAllocation": "If true it includes basic sites\r\n            Basic sites are not used for capacity allocation.",
                        "isApplicableForAllComputeModes": "Is capacity applicable for all sites?",
                        "siteMode": "Shared or Dedicated"
                    }
                ],
                "networkAccessControlList": [
                    {}
                ],
                "environmentIsHealthy": "True/false indicating whether the hostingEnvironment (App Service Environment) is healthy",
                "environmentStatus": "Detailed message about with results of the last check of the hostingEnvironment (App Service Environment)",
                "resourceGroup": "Resource group of the hostingEnvironment (App Service Environment)",
                "apiManagementAccountId": "Api Management Account associated with this Hosting Environment",
                "suspended": "True/false indicating whether the hostingEnvironment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available\r\n            (most likely because NSG blocked the incoming traffic)"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/capacities/virtualip",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/sites",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/serverfarms",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/providers/Microsoft.Web/sourcecontrols",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "token": "(string)",
                "tokenSecret": "(string)",
                "refreshToken": "(string)",
                "expirationTime": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Name or Source Control Type",
                "token": "OAuth Access Token",
                "tokenSecret": "OAuth Access Token Secret",
                "refreshToken": "OAuth Refresh Token",
                "expirationTime": "OAuth Token Expiration"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/providers/Microsoft.Web/publishingUsers/web",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/providers/Microsoft.Web/publishingUsers/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "publishingUserName": "(string)",
                "publishingPassword": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Username (internal)",
                "publishingUserName": "Username used for publishing",
                "publishingPassword": "Password used for publishing"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "status": "(string)",
                "subscription": "(string)",
                "adminSiteName": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "maximumNumberOfWorkers": "(integer)",
                "geoRegion": "(string)",
                "perSiteScaling": "(boolean)",
                "numberOfSites": "(integer)",
                "resourceGroup": "(string)"
            },
            "sku": {
                "name": "(string)",
                "tier": "(string)",
                "size": "(string)",
                "family": "(string)",
                "capacity": "(integer)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Name for the App Service Plan",
                "status": "App Service Plan Status",
                "subscription": "App Service Plan Subscription",
                "adminSiteName": "App Service Plan administration site",
                "hostingEnvironmentProfile": {
                    "id": "Resource id of the hostingEnvironment (App Service Environment)",
                    "name": "Name of the hostingEnvironment (App Service Environment) (read only)",
                    "type": "Resource type of the hostingEnvironment (App Service Environment) (read only)"
                },
                "maximumNumberOfWorkers": "Maximum number of instances that can be assigned to this App Service Plan",
                "geoRegion": "Geographical location for the App Service Plan",
                "perSiteScaling": "If True apps assigned to this App Service Plan can be scaled independently\r\n            If False apps assigned to this App Service Plan will scale to all instances of the plan",
                "numberOfSites": "Number of web apps assigned to this App Service Plan",
                "resourceGroup": "Resource group of the serverfarm"
            },
            "sku": {
                "name": "Name of the resource sku",
                "tier": "Service Tier of the resource sku",
                "size": "Size specifier of the resource sku",
                "family": "Family code of the resource sku",
                "capacity": "Current number of instances assigned to the resource"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "startAddress": "(string)",
                "endAddress": "(string)",
                "routeType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "startAddress": "(string)",
                "endAddress": "(string)",
                "routeType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "vnetName": "The VNET name.",
                "vpnPackageUri": "The URI where the Vpn package can be downloaded"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/operationresults/{operationId}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetResourceId": "(string)",
                "certThumbprint": "(string)",
                "certBlob": "(string)",
                "routes": [
                    {
                        "id": "(string)",
                        "name": "(string)",
                        "location": "(string)",
                        "type": "(string)",
                        "tags": {},
                        "properties": {
                            "name": "(string)",
                            "startAddress": "(string)",
                            "endAddress": "(string)",
                            "routeType": "(string)"
                        }
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "vnetResourceId": "The vnet resource id",
                "certThumbprint": "The client certificate thumbprint",
                "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection.",
                "routes": [
                    {
                        "id": "Resource Id",
                        "name": "Resource Name",
                        "location": "Resource Location",
                        "type": "Resource type",
                        "tags": {},
                        "properties": {
                            "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                            "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                            "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                            "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
                        }
                    }
                ]
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetResourceId": "(string)",
                "certThumbprint": "(string)",
                "certBlob": "(string)",
                "routes": [
                    {
                        "id": "(string)",
                        "name": "(string)",
                        "location": "(string)",
                        "type": "(string)",
                        "tags": {},
                        "properties": {
                            "name": "(string)",
                            "startAddress": "(string)",
                            "endAddress": "(string)",
                            "routeType": "(string)"
                        }
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "vnetResourceId": "The vnet resource id",
                "certThumbprint": "The client certificate thumbprint",
                "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection.",
                "routes": [
                    {
                        "id": "Resource Id",
                        "name": "Resource Name",
                        "location": "Resource Location",
                        "type": "Resource type",
                        "tags": {},
                        "properties": {
                            "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                            "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                            "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                            "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
                        }
                    }
                ]
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetResourceId": "(string)",
                "certThumbprint": "(string)",
                "certBlob": "(string)",
                "routes": [
                    {
                        "id": "(string)",
                        "name": "(string)",
                        "location": "(string)",
                        "type": "(string)",
                        "tags": {},
                        "properties": {
                            "name": "(string)",
                            "startAddress": "(string)",
                            "endAddress": "(string)",
                            "routeType": "(string)"
                        }
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "vnetResourceId": "The vnet resource id",
                "certThumbprint": "The client certificate thumbprint",
                "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection.",
                "routes": [
                    {
                        "id": "Resource Id",
                        "name": "Resource Name",
                        "location": "Resource Location",
                        "type": "Resource type",
                        "tags": {},
                        "properties": {
                            "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                            "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                            "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                            "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
                        }
                    }
                ]
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetResourceId": "(string)",
                "certThumbprint": "(string)",
                "certBlob": "(string)",
                "routes": [
                    {
                        "id": "(string)",
                        "name": "(string)",
                        "location": "(string)",
                        "type": "(string)",
                        "tags": {},
                        "properties": {
                            "name": "(string)",
                            "startAddress": "(string)",
                            "endAddress": "(string)",
                            "routeType": "(string)"
                        }
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "vnetResourceId": "The vnet resource id",
                "certThumbprint": "The client certificate thumbprint",
                "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection.",
                "routes": [
                    {
                        "id": "Resource Id",
                        "name": "Resource Name",
                        "location": "Resource Location",
                        "type": "Resource type",
                        "tags": {},
                        "properties": {
                            "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                            "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                            "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                            "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
                        }
                    }
                ]
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/operationresults/{operationId}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/operationresults/{operationId}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "connectionStringNames": [
                    "(string)"
                ],
                "appSettingNames": [
                    "(string)"
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "connectionStringNames": [
                    null
                ],
                "appSettingNames": [
                    null
                ]
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "state": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "repositorySiteName": "(string)",
                "usageState": "(string)",
                "enabled": "(boolean)",
                "enabledHostNames": [
                    "(string)"
                ],
                "availabilityState": "(string)",
                "hostNameSslStates": [
                    {
                        "name": "(string)",
                        "sslState": "(string)",
                        "virtualIP": "(string)",
                        "thumbprint": "(string)",
                        "toUpdate": "(boolean)",
                        "toUpdateIpBasedSsl": "(boolean)"
                    }
                ],
                "serverFarmId": "(string)",
                "lastModifiedTimeUtc": "(string)",
                "siteConfig": {
                    "id": "(string)",
                    "name": "(string)",
                    "location": "(string)",
                    "type": "(string)",
                    "tags": {},
                    "properties": {
                        "numberOfWorkers": "(integer)",
                        "defaultDocuments": [
                            "(string)"
                        ],
                        "netFrameworkVersion": "(string)",
                        "phpVersion": "(string)",
                        "pythonVersion": "(string)",
                        "requestTracingEnabled": "(boolean)",
                        "requestTracingExpirationTime": "(string)",
                        "remoteDebuggingEnabled": "(boolean)",
                        "remoteDebuggingVersion": "(string)",
                        "httpLoggingEnabled": "(boolean)",
                        "logsDirectorySizeLimit": "(integer)",
                        "detailedErrorLoggingEnabled": "(boolean)",
                        "publishingUsername": "(string)",
                        "publishingPassword": "(string)",
                        "appSettings": [
                            {
                                "name": "(string)",
                                "value": "(string)"
                            }
                        ],
                        "metadata": [
                            {
                                "name": "(string)",
                                "value": "(string)"
                            }
                        ],
                        "connectionStrings": [
                            {
                                "name": "(string)",
                                "connectionString": "(string)",
                                "type": "(string)"
                            }
                        ],
                        "handlerMappings": [
                            {
                                "extension": "(string)",
                                "scriptProcessor": "(string)",
                                "arguments": "(string)"
                            }
                        ],
                        "documentRoot": "(string)",
                        "scmType": "(string)",
                        "use32BitWorkerProcess": "(boolean)",
                        "webSocketsEnabled": "(boolean)",
                        "alwaysOn": "(boolean)",
                        "javaVersion": "(string)",
                        "javaContainer": "(string)",
                        "javaContainerVersion": "(string)",
                        "managedPipelineMode": "(string)",
                        "virtualApplications": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)",
                                "preloadEnabled": "(boolean)",
                                "virtualDirectories": [
                                    {
                                        "virtualPath": "(string)",
                                        "physicalPath": "(string)"
                                    }
                                ]
                            }
                        ],
                        "loadBalancing": "(string)",
                        "experiments": {
                            "rampUpRules": [
                                {
                                    "actionHostName": "(string)",
                                    "reroutePercentage": "(number)",
                                    "changeStep": "(number)",
                                    "changeIntervalInMinutes": "(integer)",
                                    "minReroutePercentage": "(number)",
                                    "maxReroutePercentage": "(number)",
                                    "changeDecisionCallbackUrl": "(string)",
                                    "name": "(string)"
                                }
                            ]
                        },
                        "limits": {
                            "maxPercentageCpu": "(number)",
                            "maxMemoryInMb": "(integer)",
                            "maxDiskSizeInMb": "(integer)"
                        },
                        "autoHealEnabled": "(boolean)",
                        "autoHealRules": {
                            "triggers": {
                                "requests": {
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                },
                                "privateBytesInKB": "(integer)",
                                "statusCodes": [
                                    {
                                        "status": "(integer)",
                                        "subStatus": "(integer)",
                                        "win32Status": "(integer)",
                                        "count": "(integer)",
                                        "timeInterval": "(string)"
                                    }
                                ],
                                "slowRequests": {
                                    "timeTaken": "(string)",
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                }
                            },
                            "actions": {
                                "actionType": "(string)",
                                "customAction": {
                                    "exe": "(string)",
                                    "parameters": "(string)"
                                },
                                "minProcessExecutionTime": "(string)"
                            }
                        },
                        "tracingOptions": "(string)",
                        "vnetName": "(string)",
                        "cors": {
                            "allowedOrigins": [
                                "(string)"
                            ]
                        },
                        "apiDefinition": {
                            "url": "(string)"
                        },
                        "autoSwapSlotName": "(string)"
                    }
                },
                "trafficManagerHostNames": [
                    "(string)"
                ],
                "premiumAppDeployed": "(boolean)",
                "scmSiteAlsoStopped": "(boolean)",
                "targetSwapSlot": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "microService": "(string)",
                "gatewaySiteName": "(string)",
                "clientAffinityEnabled": "(boolean)",
                "clientCertEnabled": "(boolean)",
                "outboundIpAddresses": "(string)",
                "cloningInfo": {
                    "correlationId": "(string)",
                    "overwrite": "(boolean)",
                    "cloneCustomHostNames": "(boolean)",
                    "cloneSourceControl": "(boolean)",
                    "sourceWebAppId": "(string)",
                    "hostingEnvironment": "(string)",
                    "appSettingsOverrides": {},
                    "configureLoadBalancing": "(boolean)",
                    "trafficManagerProfileId": "(string)",
                    "trafficManagerProfileName": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Name of web app",
                "state": "State of the web app",
                "hostNames": [
                    null
                ],
                "repositorySiteName": "Name of repository site",
                "usageState": "State indicating whether web app has exceeded its quota usage",
                "enabled": "True if the site is enabled; otherwise, false. Setting this  value to false disables the site (takes the site off line).",
                "enabledHostNames": [
                    null
                ],
                "availabilityState": "Management information availability state for the web app. Possible values are Normal or Limited. \r\n            Normal means that the site is running correctly and that management information for the site is available. \r\n            Limited means that only partial management information for the site is available and that detailed site information is unavailable.",
                "hostNameSslStates": [
                    {
                        "name": "Host name",
                        "sslState": "SSL type",
                        "virtualIP": "Virtual IP address assigned to the host name if IP based SSL is enabled",
                        "thumbprint": "SSL cert thumbprint",
                        "toUpdate": "Set this flag to update existing host name",
                        "toUpdateIpBasedSsl": "Set this flag to update existing host name"
                    }
                ],
                "lastModifiedTimeUtc": "Last time web app was modified in UTC",
                "siteConfig": {
                    "id": "Resource Id",
                    "name": "Resource Name",
                    "location": "Resource Location",
                    "type": "Resource type",
                    "tags": {},
                    "properties": {
                        "numberOfWorkers": "Number of workers",
                        "defaultDocuments": [
                            null
                        ],
                        "netFrameworkVersion": "Net Framework Version",
                        "phpVersion": "Version of PHP",
                        "pythonVersion": "Version of Python",
                        "requestTracingEnabled": "Enable request tracing",
                        "requestTracingExpirationTime": "Request tracing expiration time",
                        "remoteDebuggingEnabled": "Remote Debugging Enabled",
                        "remoteDebuggingVersion": "Remote Debugging Version",
                        "httpLoggingEnabled": "HTTP logging Enabled",
                        "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                        "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                        "publishingUsername": "Publishing user name",
                        "publishingPassword": "Publishing password",
                        "appSettings": [
                            {
                                "name": "Pair name",
                                "value": "Pair value"
                            }
                        ],
                        "metadata": [
                            {
                                "name": "Pair name",
                                "value": "Pair value"
                            }
                        ],
                        "connectionStrings": [
                            {
                                "name": "Name of connection string",
                                "connectionString": "Connection string value",
                                "type": "Type of database"
                            }
                        ],
                        "handlerMappings": [
                            {
                                "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                                "scriptProcessor": "The absolute path to the FastCGI application.",
                                "arguments": "Command-line arguments to be passed to the script processor."
                            }
                        ],
                        "documentRoot": "Document root",
                        "scmType": "SCM type",
                        "use32BitWorkerProcess": "Use 32 bit worker process",
                        "webSocketsEnabled": "Web socket enabled.",
                        "alwaysOn": "Always On",
                        "javaVersion": "Java version",
                        "javaContainer": "Java container",
                        "javaContainerVersion": "Java container version",
                        "managedPipelineMode": "Managed pipeline mode",
                        "virtualApplications": [
                            {
                                "virtualDirectories": [
                                    {}
                                ]
                            }
                        ],
                        "loadBalancing": "Site load balancing",
                        "experiments": {
                            "rampUpRules": [
                                {
                                    "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                                    "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                                    "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                                    "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                                    "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                                    "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                                    "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                                    "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                }
                            ]
                        },
                        "limits": {
                            "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                            "maxMemoryInMb": "Maximum allowed memory usage in MB",
                            "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                        },
                        "autoHealEnabled": "Auto heal enabled",
                        "autoHealRules": {
                            "triggers": {
                                "requests": {
                                    "count": "Count",
                                    "timeInterval": "TimeInterval"
                                },
                                "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                                "statusCodes": [
                                    {
                                        "status": "HTTP status code",
                                        "subStatus": "SubStatus",
                                        "win32Status": "Win32 error code",
                                        "count": "Count",
                                        "timeInterval": "TimeInterval"
                                    }
                                ],
                                "slowRequests": {
                                    "timeTaken": "TimeTaken",
                                    "count": "Count",
                                    "timeInterval": "TimeInterval"
                                }
                            },
                            "actions": {
                                "actionType": "ActionType - predefined action to be taken",
                                "customAction": {
                                    "exe": "Executable to be run",
                                    "parameters": "Parameters for the executable"
                                },
                                "minProcessExecutionTime": "MinProcessExecutionTime - minimum time the process must execute\r\n            before taking the action"
                            }
                        },
                        "tracingOptions": "Tracing options",
                        "vnetName": "Vnet name",
                        "cors": {
                            "allowedOrigins": [
                                null
                            ]
                        },
                        "apiDefinition": {
                            "url": "The URL of the API definition."
                        },
                        "autoSwapSlotName": "Auto swap slot name"
                    }
                },
                "trafficManagerHostNames": [
                    null
                ],
                "premiumAppDeployed": "If set indicates whether web app is deployed as a premium app",
                "scmSiteAlsoStopped": "If set indicates whether to stop SCM (KUDU) site when the web app is stopped. Default is false.",
                "targetSwapSlot": "Read-only property that specifies which slot this app will swap into",
                "hostingEnvironmentProfile": {
                    "id": "Resource id of the hostingEnvironment (App Service Environment)",
                    "name": "Name of the hostingEnvironment (App Service Environment) (read only)",
                    "type": "Resource type of the hostingEnvironment (App Service Environment) (read only)"
                },
                "microService": "",
                "gatewaySiteName": "Name of gateway app associated with web app",
                "clientAffinityEnabled": "Specifies if the client affinity is enabled when load balancing http request for multiple instances of the web app",
                "clientCertEnabled": "Specifies if the client certificate is enabled for the web app",
                "outboundIpAddresses": "List of comma separated IP addresses that this web app uses for outbound connections. Those can be used when configuring firewall rules for databases accessed by this web app.",
                "cloningInfo": {
                    "correlationId": "Correlation Id of cloning operation. This id ties multiple cloning operations\r\n            together to use the same snapshot",
                    "overwrite": "Overwrite destination web app",
                    "cloneCustomHostNames": "If true, clone custom hostnames from source web app",
                    "cloneSourceControl": "Clone source control from source web app",
                    "sourceWebAppId": "ARM resource id of the source web app. Web app resource id is of the form \r\n            /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and \r\n            /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots",
                    "hostingEnvironment": "Hosting environment",
                    "appSettingsOverrides": {},
                    "configureLoadBalancing": "If specified configure load balancing for source and clone site",
                    "trafficManagerProfileId": "ARM resource id of the traffic manager profile to use if it exists. Traffic manager resource id is of the form \r\n            /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}",
                    "trafficManagerProfileName": "Name of traffic manager profile to create. This is only needed if traffic manager profile does not already exist"
                }
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "state": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "repositorySiteName": "(string)",
                "usageState": "(string)",
                "enabled": "(boolean)",
                "enabledHostNames": [
                    "(string)"
                ],
                "availabilityState": "(string)",
                "hostNameSslStates": [
                    {
                        "name": "(string)",
                        "sslState": "(string)",
                        "virtualIP": "(string)",
                        "thumbprint": "(string)",
                        "toUpdate": "(boolean)",
                        "toUpdateIpBasedSsl": "(boolean)"
                    }
                ],
                "serverFarmId": "(string)",
                "lastModifiedTimeUtc": "(string)",
                "siteConfig": {
                    "id": "(string)",
                    "name": "(string)",
                    "location": "(string)",
                    "type": "(string)",
                    "tags": {},
                    "properties": {
                        "numberOfWorkers": "(integer)",
                        "defaultDocuments": [
                            "(string)"
                        ],
                        "netFrameworkVersion": "(string)",
                        "phpVersion": "(string)",
                        "pythonVersion": "(string)",
                        "requestTracingEnabled": "(boolean)",
                        "requestTracingExpirationTime": "(string)",
                        "remoteDebuggingEnabled": "(boolean)",
                        "remoteDebuggingVersion": "(string)",
                        "httpLoggingEnabled": "(boolean)",
                        "logsDirectorySizeLimit": "(integer)",
                        "detailedErrorLoggingEnabled": "(boolean)",
                        "publishingUsername": "(string)",
                        "publishingPassword": "(string)",
                        "appSettings": [
                            {
                                "name": "(string)",
                                "value": "(string)"
                            }
                        ],
                        "metadata": [
                            {
                                "name": "(string)",
                                "value": "(string)"
                            }
                        ],
                        "connectionStrings": [
                            {
                                "name": "(string)",
                                "connectionString": "(string)",
                                "type": "(string)"
                            }
                        ],
                        "handlerMappings": [
                            {
                                "extension": "(string)",
                                "scriptProcessor": "(string)",
                                "arguments": "(string)"
                            }
                        ],
                        "documentRoot": "(string)",
                        "scmType": "(string)",
                        "use32BitWorkerProcess": "(boolean)",
                        "webSocketsEnabled": "(boolean)",
                        "alwaysOn": "(boolean)",
                        "javaVersion": "(string)",
                        "javaContainer": "(string)",
                        "javaContainerVersion": "(string)",
                        "managedPipelineMode": "(string)",
                        "virtualApplications": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)",
                                "preloadEnabled": "(boolean)",
                                "virtualDirectories": [
                                    {
                                        "virtualPath": "(string)",
                                        "physicalPath": "(string)"
                                    }
                                ]
                            }
                        ],
                        "loadBalancing": "(string)",
                        "experiments": {
                            "rampUpRules": [
                                {
                                    "actionHostName": "(string)",
                                    "reroutePercentage": "(number)",
                                    "changeStep": "(number)",
                                    "changeIntervalInMinutes": "(integer)",
                                    "minReroutePercentage": "(number)",
                                    "maxReroutePercentage": "(number)",
                                    "changeDecisionCallbackUrl": "(string)",
                                    "name": "(string)"
                                }
                            ]
                        },
                        "limits": {
                            "maxPercentageCpu": "(number)",
                            "maxMemoryInMb": "(integer)",
                            "maxDiskSizeInMb": "(integer)"
                        },
                        "autoHealEnabled": "(boolean)",
                        "autoHealRules": {
                            "triggers": {
                                "requests": {
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                },
                                "privateBytesInKB": "(integer)",
                                "statusCodes": [
                                    {
                                        "status": "(integer)",
                                        "subStatus": "(integer)",
                                        "win32Status": "(integer)",
                                        "count": "(integer)",
                                        "timeInterval": "(string)"
                                    }
                                ],
                                "slowRequests": {
                                    "timeTaken": "(string)",
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                }
                            },
                            "actions": {
                                "actionType": "(string)",
                                "customAction": {
                                    "exe": "(string)",
                                    "parameters": "(string)"
                                },
                                "minProcessExecutionTime": "(string)"
                            }
                        },
                        "tracingOptions": "(string)",
                        "vnetName": "(string)",
                        "cors": {
                            "allowedOrigins": [
                                "(string)"
                            ]
                        },
                        "apiDefinition": {
                            "url": "(string)"
                        },
                        "autoSwapSlotName": "(string)"
                    }
                },
                "trafficManagerHostNames": [
                    "(string)"
                ],
                "premiumAppDeployed": "(boolean)",
                "scmSiteAlsoStopped": "(boolean)",
                "targetSwapSlot": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "microService": "(string)",
                "gatewaySiteName": "(string)",
                "clientAffinityEnabled": "(boolean)",
                "clientCertEnabled": "(boolean)",
                "outboundIpAddresses": "(string)",
                "cloningInfo": {
                    "correlationId": "(string)",
                    "overwrite": "(boolean)",
                    "cloneCustomHostNames": "(boolean)",
                    "cloneSourceControl": "(boolean)",
                    "sourceWebAppId": "(string)",
                    "hostingEnvironment": "(string)",
                    "appSettingsOverrides": {},
                    "configureLoadBalancing": "(boolean)",
                    "trafficManagerProfileId": "(string)",
                    "trafficManagerProfileName": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Name of web app",
                "state": "State of the web app",
                "hostNames": [
                    null
                ],
                "repositorySiteName": "Name of repository site",
                "usageState": "State indicating whether web app has exceeded its quota usage",
                "enabled": "True if the site is enabled; otherwise, false. Setting this  value to false disables the site (takes the site off line).",
                "enabledHostNames": [
                    null
                ],
                "availabilityState": "Management information availability state for the web app. Possible values are Normal or Limited. \r\n            Normal means that the site is running correctly and that management information for the site is available. \r\n            Limited means that only partial management information for the site is available and that detailed site information is unavailable.",
                "hostNameSslStates": [
                    {
                        "name": "Host name",
                        "sslState": "SSL type",
                        "virtualIP": "Virtual IP address assigned to the host name if IP based SSL is enabled",
                        "thumbprint": "SSL cert thumbprint",
                        "toUpdate": "Set this flag to update existing host name",
                        "toUpdateIpBasedSsl": "Set this flag to update existing host name"
                    }
                ],
                "lastModifiedTimeUtc": "Last time web app was modified in UTC",
                "siteConfig": {
                    "id": "Resource Id",
                    "name": "Resource Name",
                    "location": "Resource Location",
                    "type": "Resource type",
                    "tags": {},
                    "properties": {
                        "numberOfWorkers": "Number of workers",
                        "defaultDocuments": [
                            null
                        ],
                        "netFrameworkVersion": "Net Framework Version",
                        "phpVersion": "Version of PHP",
                        "pythonVersion": "Version of Python",
                        "requestTracingEnabled": "Enable request tracing",
                        "requestTracingExpirationTime": "Request tracing expiration time",
                        "remoteDebuggingEnabled": "Remote Debugging Enabled",
                        "remoteDebuggingVersion": "Remote Debugging Version",
                        "httpLoggingEnabled": "HTTP logging Enabled",
                        "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                        "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                        "publishingUsername": "Publishing user name",
                        "publishingPassword": "Publishing password",
                        "appSettings": [
                            {
                                "name": "Pair name",
                                "value": "Pair value"
                            }
                        ],
                        "metadata": [
                            {
                                "name": "Pair name",
                                "value": "Pair value"
                            }
                        ],
                        "connectionStrings": [
                            {
                                "name": "Name of connection string",
                                "connectionString": "Connection string value",
                                "type": "Type of database"
                            }
                        ],
                        "handlerMappings": [
                            {
                                "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                                "scriptProcessor": "The absolute path to the FastCGI application.",
                                "arguments": "Command-line arguments to be passed to the script processor."
                            }
                        ],
                        "documentRoot": "Document root",
                        "scmType": "SCM type",
                        "use32BitWorkerProcess": "Use 32 bit worker process",
                        "webSocketsEnabled": "Web socket enabled.",
                        "alwaysOn": "Always On",
                        "javaVersion": "Java version",
                        "javaContainer": "Java container",
                        "javaContainerVersion": "Java container version",
                        "managedPipelineMode": "Managed pipeline mode",
                        "virtualApplications": [
                            {
                                "virtualDirectories": [
                                    {}
                                ]
                            }
                        ],
                        "loadBalancing": "Site load balancing",
                        "experiments": {
                            "rampUpRules": [
                                {
                                    "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                                    "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                                    "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                                    "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                                    "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                                    "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                                    "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                                    "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                }
                            ]
                        },
                        "limits": {
                            "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                            "maxMemoryInMb": "Maximum allowed memory usage in MB",
                            "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                        },
                        "autoHealEnabled": "Auto heal enabled",
                        "autoHealRules": {
                            "triggers": {
                                "requests": {
                                    "count": "Count",
                                    "timeInterval": "TimeInterval"
                                },
                                "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                                "statusCodes": [
                                    {
                                        "status": "HTTP status code",
                                        "subStatus": "SubStatus",
                                        "win32Status": "Win32 error code",
                                        "count": "Count",
                                        "timeInterval": "TimeInterval"
                                    }
                                ],
                                "slowRequests": {
                                    "timeTaken": "TimeTaken",
                                    "count": "Count",
                                    "timeInterval": "TimeInterval"
                                }
                            },
                            "actions": {
                                "actionType": "ActionType - predefined action to be taken",
                                "customAction": {
                                    "exe": "Executable to be run",
                                    "parameters": "Parameters for the executable"
                                },
                                "minProcessExecutionTime": "MinProcessExecutionTime - minimum time the process must execute\r\n            before taking the action"
                            }
                        },
                        "tracingOptions": "Tracing options",
                        "vnetName": "Vnet name",
                        "cors": {
                            "allowedOrigins": [
                                null
                            ]
                        },
                        "apiDefinition": {
                            "url": "The URL of the API definition."
                        },
                        "autoSwapSlotName": "Auto swap slot name"
                    }
                },
                "trafficManagerHostNames": [
                    null
                ],
                "premiumAppDeployed": "If set indicates whether web app is deployed as a premium app",
                "scmSiteAlsoStopped": "If set indicates whether to stop SCM (KUDU) site when the web app is stopped. Default is false.",
                "targetSwapSlot": "Read-only property that specifies which slot this app will swap into",
                "hostingEnvironmentProfile": {
                    "id": "Resource id of the hostingEnvironment (App Service Environment)",
                    "name": "Name of the hostingEnvironment (App Service Environment) (read only)",
                    "type": "Resource type of the hostingEnvironment (App Service Environment) (read only)"
                },
                "microService": "",
                "gatewaySiteName": "Name of gateway app associated with web app",
                "clientAffinityEnabled": "Specifies if the client affinity is enabled when load balancing http request for multiple instances of the web app",
                "clientCertEnabled": "Specifies if the client certificate is enabled for the web app",
                "outboundIpAddresses": "List of comma separated IP addresses that this web app uses for outbound connections. Those can be used when configuring firewall rules for databases accessed by this web app.",
                "cloningInfo": {
                    "correlationId": "Correlation Id of cloning operation. This id ties multiple cloning operations\r\n            together to use the same snapshot",
                    "overwrite": "Overwrite destination web app",
                    "cloneCustomHostNames": "If true, clone custom hostnames from source web app",
                    "cloneSourceControl": "Clone source control from source web app",
                    "sourceWebAppId": "ARM resource id of the source web app. Web app resource id is of the form \r\n            /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and \r\n            /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots",
                    "hostingEnvironment": "Hosting environment",
                    "appSettingsOverrides": {},
                    "configureLoadBalancing": "If specified configure load balancing for source and clone site",
                    "trafficManagerProfileId": "ARM resource id of the traffic manager profile to use if it exists. Traffic manager resource id is of the form \r\n            /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}",
                    "trafficManagerProfileName": "Name of traffic manager profile to create. This is only needed if traffic manager profile does not already exist"
                }
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
        "RequestBody": {
            "snapshotTime": "(string)",
            "siteName": "(string)",
            "slotName": "(string)"
        },
        "RequestBodyDoc": {
            "snapshotTime": "Point in time in which the site recover should be attempted.",
            "siteName": "[Optional] Destination web app name into which web app should be recovered. This is case when new web app should be created instead.",
            "slotName": "[Optional] Destination web app slot name into which web app should be recovered"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
        "RequestBody": {
            "snapshotTime": "(string)",
            "siteName": "(string)",
            "slotName": "(string)"
        },
        "RequestBodyDoc": {
            "snapshotTime": "Point in time in which the site recover should be attempted.",
            "siteName": "[Optional] Destination web app name into which web app should be recovered. This is case when new web app should be created instead.",
            "slotName": "[Optional] Destination web app slot name into which web app should be recovered"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)",
                "status": "(integer)",
                "message": "(string)",
                "author": "(string)",
                "deployer": "(string)",
                "author_email": "(string)",
                "start_time": "(string)",
                "end_time": "(string)",
                "active": "(boolean)",
                "details": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "id": "Id",
                "status": "Status",
                "message": "Message",
                "author": "Author",
                "deployer": "Deployer",
                "author_email": "AuthorEmail",
                "start_time": "StartTime",
                "end_time": "EndTime",
                "active": "Active",
                "details": "Detail"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)",
                "status": "(integer)",
                "message": "(string)",
                "author": "(string)",
                "deployer": "(string)",
                "author_email": "(string)",
                "start_time": "(string)",
                "end_time": "(string)",
                "active": "(boolean)",
                "details": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "id": "Id",
                "status": "Status",
                "message": "Message",
                "author": "Author",
                "deployer": "Deployer",
                "author_email": "AuthorEmail",
                "start_time": "StartTime",
                "end_time": "EndTime",
                "active": "Active",
                "details": "Detail"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)",
                "status": "(integer)",
                "message": "(string)",
                "author": "(string)",
                "deployer": "(string)",
                "author_email": "(string)",
                "start_time": "(string)",
                "end_time": "(string)",
                "active": "(boolean)",
                "details": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "id": "Id",
                "status": "Status",
                "message": "Message",
                "author": "Author",
                "deployer": "Deployer",
                "author_email": "AuthorEmail",
                "start_time": "StartTime",
                "end_time": "EndTime",
                "active": "Active",
                "details": "Detail"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)",
                "status": "(integer)",
                "message": "(string)",
                "author": "(string)",
                "deployer": "(string)",
                "author_email": "(string)",
                "start_time": "(string)",
                "end_time": "(string)",
                "active": "(boolean)",
                "details": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "id": "Id",
                "status": "Status",
                "message": "Message",
                "author": "Author",
                "deployer": "Deployer",
                "author_email": "AuthorEmail",
                "start_time": "StartTime",
                "end_time": "EndTime",
                "active": "Active",
                "details": "Detail"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "siteName": "(string)",
                "domainId": "(string)",
                "azureResourceName": "(string)",
                "azureResourceType": "(string)",
                "customHostNameDnsRecordType": "(string)",
                "hostNameType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Hostname",
                "siteName": "Web app name",
                "domainId": "Fully qualified ARM domain resource URI",
                "azureResourceName": "Azure resource name",
                "azureResourceType": "Azure resource type",
                "customHostNameDnsRecordType": "Custom DNS record type",
                "hostNameType": "Host name type"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "siteName": "(string)",
                "domainId": "(string)",
                "azureResourceName": "(string)",
                "azureResourceType": "(string)",
                "customHostNameDnsRecordType": "(string)",
                "hostNameType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "name": "Hostname",
                "siteName": "Web app name",
                "domainId": "Fully qualified ARM domain resource URI",
                "azureResourceName": "Azure resource name",
                "azureResourceType": "Azure resource type",
                "customHostNameDnsRecordType": "Custom DNS record type",
                "hostNameType": "Host name type"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "publishingPassword": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "metadata": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        },
                        "minProcessExecutionTime": "(string)"
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "cors": {
                    "allowedOrigins": [
                        "(string)"
                    ]
                },
                "apiDefinition": {
                    "url": "(string)"
                },
                "autoSwapSlotName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "numberOfWorkers": "Number of workers",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": "Net Framework Version",
                "phpVersion": "Version of PHP",
                "pythonVersion": "Version of Python",
                "requestTracingEnabled": "Enable request tracing",
                "requestTracingExpirationTime": "Request tracing expiration time",
                "remoteDebuggingEnabled": "Remote Debugging Enabled",
                "remoteDebuggingVersion": "Remote Debugging Version",
                "httpLoggingEnabled": "HTTP logging Enabled",
                "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                "publishingUsername": "Publishing user name",
                "publishingPassword": "Publishing password",
                "appSettings": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "metadata": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string",
                        "connectionString": "Connection string value",
                        "type": "Type of database"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root",
                "scmType": "SCM type",
                "use32BitWorkerProcess": "Use 32 bit worker process",
                "webSocketsEnabled": "Web socket enabled.",
                "alwaysOn": "Always On",
                "javaVersion": "Java version",
                "javaContainer": "Java container",
                "javaContainerVersion": "Java container version",
                "managedPipelineMode": "Managed pipeline mode",
                "virtualApplications": [
                    {
                        "virtualDirectories": [
                            {}
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                            "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                            "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                            "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                },
                "autoHealEnabled": "Auto heal enabled",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        },
                        "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                        "statusCodes": [
                            {
                                "status": "HTTP status code",
                                "subStatus": "SubStatus",
                                "win32Status": "Win32 error code",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "TimeTaken",
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        }
                    },
                    "actions": {
                        "actionType": "ActionType - predefined action to be taken",
                        "customAction": {
                            "exe": "Executable to be run",
                            "parameters": "Parameters for the executable"
                        },
                        "minProcessExecutionTime": "MinProcessExecutionTime - minimum time the process must execute\r\n            before taking the action"
                    }
                },
                "tracingOptions": "Tracing options",
                "vnetName": "Vnet name",
                "cors": {
                    "allowedOrigins": [
                        null
                    ]
                },
                "apiDefinition": {
                    "url": "The URL of the API definition."
                },
                "autoSwapSlotName": "Auto swap slot name"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "publishingPassword": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "metadata": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        },
                        "minProcessExecutionTime": "(string)"
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "cors": {
                    "allowedOrigins": [
                        "(string)"
                    ]
                },
                "apiDefinition": {
                    "url": "(string)"
                },
                "autoSwapSlotName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "numberOfWorkers": "Number of workers",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": "Net Framework Version",
                "phpVersion": "Version of PHP",
                "pythonVersion": "Version of Python",
                "requestTracingEnabled": "Enable request tracing",
                "requestTracingExpirationTime": "Request tracing expiration time",
                "remoteDebuggingEnabled": "Remote Debugging Enabled",
                "remoteDebuggingVersion": "Remote Debugging Version",
                "httpLoggingEnabled": "HTTP logging Enabled",
                "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                "publishingUsername": "Publishing user name",
                "publishingPassword": "Publishing password",
                "appSettings": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "metadata": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string",
                        "connectionString": "Connection string value",
                        "type": "Type of database"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root",
                "scmType": "SCM type",
                "use32BitWorkerProcess": "Use 32 bit worker process",
                "webSocketsEnabled": "Web socket enabled.",
                "alwaysOn": "Always On",
                "javaVersion": "Java version",
                "javaContainer": "Java container",
                "javaContainerVersion": "Java container version",
                "managedPipelineMode": "Managed pipeline mode",
                "virtualApplications": [
                    {
                        "virtualDirectories": [
                            {}
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                            "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                            "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                            "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                },
                "autoHealEnabled": "Auto heal enabled",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        },
                        "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                        "statusCodes": [
                            {
                                "status": "HTTP status code",
                                "subStatus": "SubStatus",
                                "win32Status": "Win32 error code",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "TimeTaken",
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        }
                    },
                    "actions": {
                        "actionType": "ActionType - predefined action to be taken",
                        "customAction": {
                            "exe": "Executable to be run",
                            "parameters": "Parameters for the executable"
                        },
                        "minProcessExecutionTime": "MinProcessExecutionTime - minimum time the process must execute\r\n            before taking the action"
                    }
                },
                "tracingOptions": "Tracing options",
                "vnetName": "Vnet name",
                "cors": {
                    "allowedOrigins": [
                        null
                    ]
                },
                "apiDefinition": {
                    "url": "The URL of the API definition."
                },
                "autoSwapSlotName": "Auto swap slot name"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "publishingPassword": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "metadata": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        },
                        "minProcessExecutionTime": "(string)"
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "cors": {
                    "allowedOrigins": [
                        "(string)"
                    ]
                },
                "apiDefinition": {
                    "url": "(string)"
                },
                "autoSwapSlotName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "numberOfWorkers": "Number of workers",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": "Net Framework Version",
                "phpVersion": "Version of PHP",
                "pythonVersion": "Version of Python",
                "requestTracingEnabled": "Enable request tracing",
                "requestTracingExpirationTime": "Request tracing expiration time",
                "remoteDebuggingEnabled": "Remote Debugging Enabled",
                "remoteDebuggingVersion": "Remote Debugging Version",
                "httpLoggingEnabled": "HTTP logging Enabled",
                "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                "publishingUsername": "Publishing user name",
                "publishingPassword": "Publishing password",
                "appSettings": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "metadata": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string",
                        "connectionString": "Connection string value",
                        "type": "Type of database"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root",
                "scmType": "SCM type",
                "use32BitWorkerProcess": "Use 32 bit worker process",
                "webSocketsEnabled": "Web socket enabled.",
                "alwaysOn": "Always On",
                "javaVersion": "Java version",
                "javaContainer": "Java container",
                "javaContainerVersion": "Java container version",
                "managedPipelineMode": "Managed pipeline mode",
                "virtualApplications": [
                    {
                        "virtualDirectories": [
                            {}
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                            "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                            "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                            "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                },
                "autoHealEnabled": "Auto heal enabled",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        },
                        "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                        "statusCodes": [
                            {
                                "status": "HTTP status code",
                                "subStatus": "SubStatus",
                                "win32Status": "Win32 error code",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "TimeTaken",
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        }
                    },
                    "actions": {
                        "actionType": "ActionType - predefined action to be taken",
                        "customAction": {
                            "exe": "Executable to be run",
                            "parameters": "Parameters for the executable"
                        },
                        "minProcessExecutionTime": "MinProcessExecutionTime - minimum time the process must execute\r\n            before taking the action"
                    }
                },
                "tracingOptions": "Tracing options",
                "vnetName": "Vnet name",
                "cors": {
                    "allowedOrigins": [
                        null
                    ]
                },
                "apiDefinition": {
                    "url": "The URL of the API definition."
                },
                "autoSwapSlotName": "Auto swap slot name"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "publishingPassword": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "metadata": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        },
                        "minProcessExecutionTime": "(string)"
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "cors": {
                    "allowedOrigins": [
                        "(string)"
                    ]
                },
                "apiDefinition": {
                    "url": "(string)"
                },
                "autoSwapSlotName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "numberOfWorkers": "Number of workers",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": "Net Framework Version",
                "phpVersion": "Version of PHP",
                "pythonVersion": "Version of Python",
                "requestTracingEnabled": "Enable request tracing",
                "requestTracingExpirationTime": "Request tracing expiration time",
                "remoteDebuggingEnabled": "Remote Debugging Enabled",
                "remoteDebuggingVersion": "Remote Debugging Version",
                "httpLoggingEnabled": "HTTP logging Enabled",
                "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                "publishingUsername": "Publishing user name",
                "publishingPassword": "Publishing password",
                "appSettings": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "metadata": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string",
                        "connectionString": "Connection string value",
                        "type": "Type of database"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root",
                "scmType": "SCM type",
                "use32BitWorkerProcess": "Use 32 bit worker process",
                "webSocketsEnabled": "Web socket enabled.",
                "alwaysOn": "Always On",
                "javaVersion": "Java version",
                "javaContainer": "Java container",
                "javaContainerVersion": "Java container version",
                "managedPipelineMode": "Managed pipeline mode",
                "virtualApplications": [
                    {
                        "virtualDirectories": [
                            {}
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                            "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                            "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                            "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                },
                "autoHealEnabled": "Auto heal enabled",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        },
                        "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                        "statusCodes": [
                            {
                                "status": "HTTP status code",
                                "subStatus": "SubStatus",
                                "win32Status": "Win32 error code",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "TimeTaken",
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        }
                    },
                    "actions": {
                        "actionType": "ActionType - predefined action to be taken",
                        "customAction": {
                            "exe": "Executable to be run",
                            "parameters": "Parameters for the executable"
                        },
                        "minProcessExecutionTime": "MinProcessExecutionTime - minimum time the process must execute\r\n            before taking the action"
                    }
                },
                "tracingOptions": "Tracing options",
                "vnetName": "Vnet name",
                "cors": {
                    "allowedOrigins": [
                        null
                    ]
                },
                "apiDefinition": {
                    "url": "The URL of the API definition."
                },
                "autoSwapSlotName": "Auto swap slot name"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "repoUrl": "Repository or source control url",
                "branch": "Name of branch to use for deployment",
                "isManualIntegration": "Whether to manual or continuous integration",
                "deploymentRollbackEnabled": "Whether to manual or continuous integration",
                "isMercurial": "Mercurial or Git repository type"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "repoUrl": "Repository or source control url",
                "branch": "Name of branch to use for deployment",
                "isManualIntegration": "Whether to manual or continuous integration",
                "deploymentRollbackEnabled": "Whether to manual or continuous integration",
                "isMercurial": "Mercurial or Git repository type"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "repoUrl": "Repository or source control url",
                "branch": "Name of branch to use for deployment",
                "isManualIntegration": "Whether to manual or continuous integration",
                "deploymentRollbackEnabled": "Whether to manual or continuous integration",
                "isMercurial": "Mercurial or Git repository type"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "repoUrl": "Repository or source control url",
                "branch": "Name of branch to use for deployment",
                "isManualIntegration": "Whether to manual or continuous integration",
                "deploymentRollbackEnabled": "Whether to manual or continuous integration",
                "isMercurial": "Mercurial or Git repository type"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
        "RequestBody": {
            "enabled": "(boolean)",
            "httpApiPrefixPath": "(string)",
            "unauthenticatedClientAction": "(string)",
            "tokenStoreEnabled": "(boolean)",
            "allowedExternalRedirectUrls": [
                "(string)"
            ],
            "defaultProvider": "(string)",
            "clientId": "(string)",
            "clientSecret": "(string)",
            "issuer": "(string)",
            "allowedAudiences": [
                "(string)"
            ],
            "aadClientId": "(string)",
            "openIdIssuer": "(string)",
            "googleClientId": "(string)",
            "googleClientSecret": "(string)",
            "googleOAuthScopes": [
                "(string)"
            ],
            "facebookAppId": "(string)",
            "facebookAppSecret": "(string)",
            "facebookOAuthScopes": [
                "(string)"
            ],
            "twitterConsumerKey": "(string)",
            "twitterConsumerSecret": "(string)",
            "microsoftAccountClientId": "(string)",
            "microsoftAccountClientSecret": "(string)",
            "microsoftAccountOAuthScopes": [
                "(string)"
            ]
        },
        "RequestBodyDoc": {
            "enabled": "Gets or sets a value indicating whether the Authentication / Authorization feature is enabled for the current app.",
            "httpApiPrefixPath": "Gets or sets the relative path prefix used by platform HTTP APIs.\r\n            Changing this value is not recommended except for compatibility reasons.",
            "unauthenticatedClientAction": "Gets or sets the action to take when an unauthenticated client attempts to access the app.",
            "tokenStoreEnabled": "Gets or sets a value indicating whether to durably store platform-specific security tokens\r\n            obtained during login flows. This capability is disabled by default.",
            "allowedExternalRedirectUrls": [
                null
            ],
            "defaultProvider": "Gets or sets the default authentication provider to use when multiple providers are configured.\r\n            This setting is only needed if multiple providers are configured and the unauthenticated client\r\n            action is set to \"RedirectToLoginPage\".",
            "clientId": "Gets or sets the Client ID of this relying party application, known as the client_id.\r\n            This setting is required for enabling OpenID Connection authentication with Azure Active Directory or \r\n            other 3rd party OpenID Connect providers.\r\n            More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html",
            "clientSecret": "Gets or sets the Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).\r\n            This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.\r\n            Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.\r\n            More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html",
            "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer.\r\n            More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html",
            "allowedAudiences": [
                null
            ],
            "googleClientId": "Gets or sets the OpenID Connect Client ID for the Google web application.\r\n            This setting is required for enabling Google Sign-In.\r\n            Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/",
            "googleClientSecret": "Gets or sets the client secret associated with the Google web application.\r\n            This setting is required for enabling Google Sign-In.\r\n            Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/",
            "googleOAuthScopes": [
                null
            ],
            "facebookAppId": "Gets or sets the App ID of the Facebook app used for login.\r\n            This setting is required for enabling Facebook Login.\r\n            Facebook Login documentation: https://developers.facebook.com/docs/facebook-login",
            "facebookAppSecret": "Gets or sets the App Secret of the Facebook app used for Facebook Login.\r\n            This setting is required for enabling Facebook Login.\r\n            Facebook Login documentation: https://developers.facebook.com/docs/facebook-login",
            "facebookOAuthScopes": [
                null
            ],
            "twitterConsumerKey": "Gets or sets the OAuth 1.0a consumer key of the Twitter application used for sign-in.\r\n            This setting is required for enabling Twitter Sign-In.\r\n            Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in",
            "twitterConsumerSecret": "Gets or sets the OAuth 1.0a consumer secret of the Twitter application used for sign-in.\r\n            This setting is required for enabling Twitter Sign-In.\r\n            Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in",
            "microsoftAccountClientId": "Gets or sets the OAuth 2.0 client ID that was created for the app used for authentication.\r\n            This setting is required for enabling Microsoft Account authentication.\r\n            Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm",
            "microsoftAccountClientSecret": "Gets or sets the OAuth 2.0 client secret that was created for the app used for authentication.\r\n            This setting is required for enabling Microsoft Account authentication.\r\n            Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm",
            "microsoftAccountOAuthScopes": [
                null
            ]
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
        "RequestBody": {
            "enabled": "(boolean)",
            "httpApiPrefixPath": "(string)",
            "unauthenticatedClientAction": "(string)",
            "tokenStoreEnabled": "(boolean)",
            "allowedExternalRedirectUrls": [
                "(string)"
            ],
            "defaultProvider": "(string)",
            "clientId": "(string)",
            "clientSecret": "(string)",
            "issuer": "(string)",
            "allowedAudiences": [
                "(string)"
            ],
            "aadClientId": "(string)",
            "openIdIssuer": "(string)",
            "googleClientId": "(string)",
            "googleClientSecret": "(string)",
            "googleOAuthScopes": [
                "(string)"
            ],
            "facebookAppId": "(string)",
            "facebookAppSecret": "(string)",
            "facebookOAuthScopes": [
                "(string)"
            ],
            "twitterConsumerKey": "(string)",
            "twitterConsumerSecret": "(string)",
            "microsoftAccountClientId": "(string)",
            "microsoftAccountClientSecret": "(string)",
            "microsoftAccountOAuthScopes": [
                "(string)"
            ]
        },
        "RequestBodyDoc": {
            "enabled": "Gets or sets a value indicating whether the Authentication / Authorization feature is enabled for the current app.",
            "httpApiPrefixPath": "Gets or sets the relative path prefix used by platform HTTP APIs.\r\n            Changing this value is not recommended except for compatibility reasons.",
            "unauthenticatedClientAction": "Gets or sets the action to take when an unauthenticated client attempts to access the app.",
            "tokenStoreEnabled": "Gets or sets a value indicating whether to durably store platform-specific security tokens\r\n            obtained during login flows. This capability is disabled by default.",
            "allowedExternalRedirectUrls": [
                null
            ],
            "defaultProvider": "Gets or sets the default authentication provider to use when multiple providers are configured.\r\n            This setting is only needed if multiple providers are configured and the unauthenticated client\r\n            action is set to \"RedirectToLoginPage\".",
            "clientId": "Gets or sets the Client ID of this relying party application, known as the client_id.\r\n            This setting is required for enabling OpenID Connection authentication with Azure Active Directory or \r\n            other 3rd party OpenID Connect providers.\r\n            More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html",
            "clientSecret": "Gets or sets the Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).\r\n            This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.\r\n            Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.\r\n            More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html",
            "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer.\r\n            More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html",
            "allowedAudiences": [
                null
            ],
            "googleClientId": "Gets or sets the OpenID Connect Client ID for the Google web application.\r\n            This setting is required for enabling Google Sign-In.\r\n            Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/",
            "googleClientSecret": "Gets or sets the client secret associated with the Google web application.\r\n            This setting is required for enabling Google Sign-In.\r\n            Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/",
            "googleOAuthScopes": [
                null
            ],
            "facebookAppId": "Gets or sets the App ID of the Facebook app used for login.\r\n            This setting is required for enabling Facebook Login.\r\n            Facebook Login documentation: https://developers.facebook.com/docs/facebook-login",
            "facebookAppSecret": "Gets or sets the App Secret of the Facebook app used for Facebook Login.\r\n            This setting is required for enabling Facebook Login.\r\n            Facebook Login documentation: https://developers.facebook.com/docs/facebook-login",
            "facebookOAuthScopes": [
                null
            ],
            "twitterConsumerKey": "Gets or sets the OAuth 1.0a consumer key of the Twitter application used for sign-in.\r\n            This setting is required for enabling Twitter Sign-In.\r\n            Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in",
            "twitterConsumerSecret": "Gets or sets the OAuth 1.0a consumer secret of the Twitter application used for sign-in.\r\n            This setting is required for enabling Twitter Sign-In.\r\n            Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in",
            "microsoftAccountClientId": "Gets or sets the OAuth 2.0 client ID that was created for the app used for authentication.\r\n            This setting is required for enabling Microsoft Account authentication.\r\n            Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm",
            "microsoftAccountClientSecret": "Gets or sets the OAuth 2.0 client secret that was created for the app used for authentication.\r\n            This setting is required for enabling Microsoft Account authentication.\r\n            Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm",
            "microsoftAccountOAuthScopes": [
                null
            ]
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "applicationLogs": {
                    "fileSystem": {
                        "level": "(string)"
                    },
                    "azureTableStorage": {
                        "level": "(string)",
                        "sasUrl": "(string)"
                    },
                    "azureBlobStorage": {
                        "level": "(string)",
                        "sasUrl": "(string)",
                        "retentionInDays": "(integer)"
                    }
                },
                "httpLogs": {
                    "fileSystem": {
                        "retentionInMb": "(integer)",
                        "retentionInDays": "(integer)",
                        "enabled": "(boolean)"
                    },
                    "azureBlobStorage": {
                        "sasUrl": "(string)",
                        "retentionInDays": "(integer)",
                        "enabled": "(boolean)"
                    }
                },
                "failedRequestsTracing": {
                    "enabled": "(boolean)"
                },
                "detailedErrorMessages": {
                    "enabled": "(boolean)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "applicationLogs": {
                    "fileSystem": {
                        "level": "Log level"
                    },
                    "azureTableStorage": {
                        "level": "Log level",
                        "sasUrl": "SAS url to an azure table with add/query/delete permissions"
                    },
                    "azureBlobStorage": {
                        "level": "Log level",
                        "sasUrl": "SAS url to a azure blob container with read/write/list/delete permissions",
                        "retentionInDays": "Retention in days.\r\n            Remove blobs older than X days.\r\n            0 or lower means no retention."
                    }
                },
                "httpLogs": {
                    "fileSystem": {
                        "retentionInMb": "Maximum size in megabytes that http log files can use.\r\n            When reached old log files will be removed to make space for new ones.\r\n            Value can range between 25 and 100.",
                        "retentionInDays": "Retention in days.\r\n            Remove files older than X days.\r\n            0 or lower means no retention.",
                        "enabled": "Enabled"
                    },
                    "azureBlobStorage": {
                        "sasUrl": "SAS url to a azure blob container with read/write/list/delete permissions",
                        "retentionInDays": "Retention in days.\r\n            Remove blobs older than X days.\r\n            0 or lower means no retention.",
                        "enabled": "Enabled"
                    }
                },
                "failedRequestsTracing": {
                    "enabled": "Enabled"
                },
                "detailedErrorMessages": {
                    "enabled": "Enabled"
                }
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "applicationLogs": {
                    "fileSystem": {
                        "level": "(string)"
                    },
                    "azureTableStorage": {
                        "level": "(string)",
                        "sasUrl": "(string)"
                    },
                    "azureBlobStorage": {
                        "level": "(string)",
                        "sasUrl": "(string)",
                        "retentionInDays": "(integer)"
                    }
                },
                "httpLogs": {
                    "fileSystem": {
                        "retentionInMb": "(integer)",
                        "retentionInDays": "(integer)",
                        "enabled": "(boolean)"
                    },
                    "azureBlobStorage": {
                        "sasUrl": "(string)",
                        "retentionInDays": "(integer)",
                        "enabled": "(boolean)"
                    }
                },
                "failedRequestsTracing": {
                    "enabled": "(boolean)"
                },
                "detailedErrorMessages": {
                    "enabled": "(boolean)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "applicationLogs": {
                    "fileSystem": {
                        "level": "Log level"
                    },
                    "azureTableStorage": {
                        "level": "Log level",
                        "sasUrl": "SAS url to an azure table with add/query/delete permissions"
                    },
                    "azureBlobStorage": {
                        "level": "Log level",
                        "sasUrl": "SAS url to a azure blob container with read/write/list/delete permissions",
                        "retentionInDays": "Retention in days.\r\n            Remove blobs older than X days.\r\n            0 or lower means no retention."
                    }
                },
                "httpLogs": {
                    "fileSystem": {
                        "retentionInMb": "Maximum size in megabytes that http log files can use.\r\n            When reached old log files will be removed to make space for new ones.\r\n            Value can range between 25 and 100.",
                        "retentionInDays": "Retention in days.\r\n            Remove files older than X days.\r\n            0 or lower means no retention.",
                        "enabled": "Enabled"
                    },
                    "azureBlobStorage": {
                        "sasUrl": "SAS url to a azure blob container with read/write/list/delete permissions",
                        "retentionInDays": "Retention in days.\r\n            Remove blobs older than X days.\r\n            0 or lower means no retention.",
                        "enabled": "Enabled"
                    }
                },
                "failedRequestsTracing": {
                    "enabled": "Enabled"
                },
                "detailedErrorMessages": {
                    "enabled": "Enabled"
                }
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        "RequestBody": {
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)",
                "version": "(string)"
            },
            "properties": {},
            "sku": {
                "name": "(string)",
                "tier": "(string)",
                "size": "(string)",
                "family": "(string)",
                "capacity": "(integer)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code",
                "version": "Version of product"
            },
            "properties": {},
            "sku": {
                "name": "Name of the resource sku",
                "tier": "Service Tier of the resource sku",
                "size": "Size specifier of the resource sku",
                "family": "Family code of the resource sku",
                "capacity": "Current number of instances assigned to the resource"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        "RequestBody": {
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)",
                "version": "(string)"
            },
            "properties": {},
            "sku": {
                "name": "(string)",
                "tier": "(string)",
                "size": "(string)",
                "family": "(string)",
                "capacity": "(integer)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code",
                "version": "Version of product"
            },
            "properties": {},
            "sku": {
                "name": "Name of the resource sku",
                "tier": "Service Tier of the resource sku",
                "size": "Size specifier of the resource sku",
                "family": "Family code of the resource sku",
                "capacity": "Current number of instances assigned to the resource"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
        "RequestBody": {
            "format": "(string)"
        },
        "RequestBodyDoc": {
            "format": "Name of the format. Valid values are: \r\n            FileZilla3\r\n            WebDeploy -- default\r\n            Ftp"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
        "RequestBody": {
            "format": "(string)"
        },
        "RequestBodyDoc": {
            "format": "Name of the format. Valid values are: \r\n            FileZilla3\r\n            WebDeploy -- default\r\n            Ftp"
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "vnetName": "The VNET name.",
                "vpnPackageUri": "The URI where the Vpn package can be downloaded"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "vnetName": "The VNET name.",
                "vpnPackageUri": "The URI where the Vpn package can be downloaded"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "vnetName": "The VNET name.",
                "vpnPackageUri": "The URI where the Vpn package can be downloaded"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id",
            "name": "Resource Name",
            "location": "Resource Location",
            "type": "Resource type",
            "tags": {},
            "properties": {
                "vnetName": "The VNET name.",
                "vpnPackageUri": "The URI where the Vpn package can be downloaded"
            }
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}",
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements",
        "RequestBody": {
            "includePrivacy": "(boolean)"
        },
        "RequestBodyDoc": {
            "includePrivacy": "If true then the list of agreements will inclue agreements for domain privacy as well."
        },
        "ApiVersion": "2015-08-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/environments/{environmentName}/usage",
        "ApiVersion": "2015-08-01"
    }
]